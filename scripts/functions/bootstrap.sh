# Copyright (c) 2013, Peter Trsko <peter.trsko@gmail.com>
#
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
#     * Redistributions of source code must retain the above copyright
#       notice, this list of conditions and the following disclaimer.
#
#     * Redistributions in binary form must reproduce the above
#       copyright notice, this list of conditions and the following
#       disclaimer in the documentation and/or other materials provided
#       with the distribution.
#
#     * Neither the name of Peter Trsko nor the names of other
#       contributors may be used to endorse or promote products derived
#       from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
# OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# Summary:
#
#   Create temporary file, fill it with executable code and execute it.
#
# Usage:
#
#   bootstrap [ARGUMENT...]
#
# Description:
#
#   Executable code is generated by calling function generateScript, which has
# to be already defined. Simple example:
#
#     #!/bin/bash
#
#     set -e
#
#     function generateScript()
#     {
#         echo "echo 'Hello World!'"
#     }
#
#     source "<install-prefix>/snippets/scripts/functions/bootstrap.sh"
#
#   As we can see the executable content is expected to be taken from stdout
# of generateScripts, this allows us to force generateScript function to not be
# depending on any details about where its output is going to.
#
#   ARGUMENTs passed to this function will be passed down to the generated
# executable when invoking it. Note that this doesn't cover "$0" which is not,
# currently, available to the generated executable. Only notable exception to
# this rule is when generateScript function passes it directly to the
# generated executable in some way, e.g. inlining it in to it.
#
#   In case of any error do the cleanup, but in case of success the executed
# code is responsible for doing so. 
function bootstrap()
{
    local -r errPrefix='Error: bootstrap():'

    # XXX: Consider making tempFileTemplate to be based on the value of "$0",
    # or rather the "`basename "$0"`".
    local -r tempFileTemplate='bootstrapped.sh.XXXXXXXX'


    tempFile="$(mktemp --tmpdir "$tempFileTemplate")" && {
        # Trap won't survive exec() call, so it is necessary that generated
        # script/executable will cleanup after its self.
        trap "rm -f -- '$tempFile'" INT TERM EXIT
    } || {
        echo "$errPrefix" 'Failed to create temporary file.' 1>&2
        exit 1
    }

    # Entry point for the "outside code" is generateScript function that has
    # to be defined for this to work.
    generateScript >> "$tempFile" || {
        echo "$errPrefix" 'Failed to generate executable.' 1>&2
        exit 1
    }

    # Since we don't know if the generated executable will be bash script or
    # not we have to use system way of executin and not calling e.g. 'bash
    # "$tempFile"'.
    chmod +x "$tempFile" || {
        echo "$errPrefix" "$tempFile:" 'Failed to set executable bit.' 1>&2
        exit 1
    }

    # XXX: Open question: there is a possibility that "$0" might be a carier
    # of additional information and we should consider a way how to pass this
    # information in a consistent manner.
    exec "$tempFile" "$@"

    echo "$errPrefix" "exec(): $tempFile:" 'Failed to execute.' 1>&2
    exit 1
}

bootstrap "$@"

# vim: tabstop=4 shiftwidth=4 expandtab
